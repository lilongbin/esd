回顾:
    分支指令:B,BL,BX
    B{COND} label
      相对跳转
      PC=PC+/-32M
      b  start
      beq  loop
    BL{COND} label
      子函数调用指令
      相对跳转
      PC=PC+/-32M
      bl指令执行时,硬件会自动把bl指令的
      下一条指令的地址保存到lr寄存器;
      子程序返回就是把lr复制到pc
      mov  pc,lr
      
      stmfd  sp!, {lr}
      ldmfd  sp!, {pc}

      add pc, lr, #0

      bx   lr

      练习的目的告诉大家,注意bl嵌套使用
      时,需要保护LR寄存器值;

    BX{COND} Rm
      带状态切换的跳转指令
      跳转地址放到Rm,可以实现4G范围跳转
      切换状态是有Rm寄存器最低位来决定的
      Rm最低位是1跳转后切换到THUMB状态
      Rm最低位是0跳转后切换到ARM状态;

数据处理指令:      
    数据传送指令:mov pc, lr
                  mvn r0, #0
    算术运算指令:add,adc,sub,sbc,
                  rsb,rsc
    位运算指令:  and,orr,eor,bic
    比较指令:    cmp,cmn,tst,teq

数据处理指令的通用格式
 <opcode>{cond}{S} <Rd>, <Rn>, <shifter_operand>

  opcode:助记符(数据处理指令)
          mov  mvn add  adc
  cond:条件,ne/eq,
  S:    指令如果含有S,表示该指令的
        运算结果会影响CPSR的条件标志位;
        加S影响CPSR的标志位有两种情况;
  Rd:  目标寄存器
  Rn:  第一个源操作数寄存器
<shifter_operand> :第二个源操作数
        OP2

特殊的:
  1/数据传送指令
     mov pc, lr
     mov r0, #0
     省了 Rn(第一个源操作数)

  2/比较指令
     cmp r0, #0
     省了 Rd (目标操作数)

  3/OP2是必须有

关于加S的问题:
  1/有一类数据处理指令不需要加S
     就影响CPSR的条件标志位
     比较指令:cmp,cmn,tst,teq
     cmp r0,#0
     不加S默认影响标志位
  2/其他指令加S则影响CPSR标志位
     如果不加S,就只运算,不影响
     CPSR的条件标志位;
     加S影响CPSR的条件标志位,又两种情况:
     movs r0,#0
        r0 = 0
        N = 0
        Z = 1
        根据运算结果修改CPSR的条件标志/
        位中某些位;
        N,Z,C, 
        N,Z  
     movs pc, lr
        pc = lr
        cpsr=spsr
     数据处理器指令除了比较指令外,其他
     指令加S影响CPSR的情况:
        加"S"但是目标寄存器Rd不是PC          
           movs r0,#0
           adds r1,r2,r3
           subs r1,r2,r3
           影响CPSR,根据运算结果修改
           CPSR的条件标志位中的某些位;
        加"S"同时目标寄存器Rd是PC
           movs  pc, lr
           subs  pc, lr, #4
           影响CPSR,是把SPSR寄存器的值
           直接复制到CPSR;CPSR=SPSR;
           这样的指令可以用作异常返回指令;
      问题:这类指令在什么模式下不能用?
             系统和用户,没有SPSR;
问题是:数据指令的操作码和助记符是不是一样
        的?
    包含:机器码
          助记符
   
    机器码是32位二进制(对于机器来讲有
          特殊含义,机器规定各个的含义)

    助记符:是机器码的别名
    助记符和机器码对应
    助记符是要经过汇编器转换成机器码
    助记符和机器码的关系;
    
    bl指令的机器码
    32位
    最高8位 0xeb
    低24位  是偏移量,基于PC的
    bl 指令的跳转范围是PC+/-32M
    +/-32M偏移就是由低24位来表示的;
问题:24位表示不了+/-32M范围
    1个符号位
    23位表示数,+/-8M
    怎么回事?
    8*4 = 32
    为什么乘以四
    ARM指令,32位,在内存中的地址一定
    4的倍数;
    如果这个数是4的倍数,有个特点
    数的最低2位是00
    00 01 10 11
数据处理指令的OP2     
   1/立即数    mov  r0, #0
                mov  r0, #0xFF

                mov  r0, #0xFFFFFFFF
                #0xFFFFFFFF ARM不叫立即数
      什么是立即数?
         立即数和常数
         对机器来说的,cpu;
         cpu立即得到这个数,cpu得到
         指令的同时就知道了操作数值;
         对于ARM处理器,数在指令的
         机器码当中;
         立即数不可能达到32位
         
   2/寄存器    mov  pc, lr   @r14
   
   3/寄存器移位
      mov  r0, r1, lsl #1
           r0 = r1 << 1
      add  r0, r0, r0, lsl #1
           r0=r0 + r0 << 1
             =r0 * 3
数据处理指令里面立即数的问题:
  特殊的:
  1/一眼就能看出是合法的
     #0  #1   #0xFF
     0 - 255一定合法
  2/一眼就能看出是不合法
     0xFFFFFFFF,0xFFFF0000
     0x000001FF
     1的个数大于8
  3/0x0000010F  
     不合法!
     从左右两个方向循环看,1的间距
     大于8;
  八位数通过移位的表示
  8位图立即

ADD 
   Rd = Rn +OP2
ADC
   Rd = Rn + OP2 + C(CPSR c标志)
   寄存器32位
64位数加法
a加数(R1/R0),
b被加数(R3/R2),
a结果(R1/R0),
前者为高32位,后者为低32位
a=a+b
把两个数的低32位相加,保存进位值
然后把两个数高32位相加,并加低32位
相加产生的进位值;
  ADDS R0, R0, R2
  ADC  R1, R1, R3
减法指令
  SUB  Rd = Rn - OP2
     C = NOT 借位值
  SBC  Rd = Rn - OP2 - NOT C
64位减法
被减数(R1/R0)
减数(R3/R2)
结果(R1/R0)
前者为高32位,后者为低32位
  先减低32位,保存借位值
  再减高32位,同时减去借位值;
  SUBS  R0, R0, R2
  SBC   R1, R1, R3
反向减法
  RSB  Rd = OP2 - Rn
  RSC  Rd = OP2 - Rn - NOT C
64位减法
被减数(R1/R0)
减数(R3/R2)
结果(R1/R0)
  RSBS  R0, R2, R0
  RSC   R1, R3, R1
位操作:
  AND 操作一般用来做什么?/
      清零某些位
      判断某位是0/1?
  ORR 操作一般用来做什么?
      置位某些位,置1
  EOR 操作一般用来做什么?
      判断两个数是否相等
      C = A ^ B
      B = C ^ A
      交换,可以做写应用;
          简单的加解密;
      取反一个数的某些位
      unsigned int a;
      把 a BIT0 取反
      a = a ^ 1;
      拿0去跟一个位亦或,
        结果等原来的位
      拿1去跟一个位亦或,
        结果等于原来的位取反
      a 的BIT7 和BIT3取反
      a = a ^ 0x88;
BIC 
   Rd = Rn & ~OP2
   bic  r0, r0, #0x80

求解两个数的最大公约数
  A=n * C (n=1,2,3...) 
  B=m * C (m=1,2,3...)
  C
  假定A大
  D = A - B = (n - m)*C 
  20
  12

  20 - 12  = 8
  
  12 - 8 = 4
  
  8,4
  8 - 4 = 4;

  while(A != B)
  {
     if (A >= B)
     {
        A = A - B;
     }
     else
     {
        B = B - A;
     }
  }
  做完的人:
  1/预习加载存储指令
  2/计算1-10的累加和
  
  ldr  r0,[r1, #0x8] 
  ldrb r0,[r1], #0x8

单寄存器的加载存储:
  字和无符号字节的加载存储
      基址就是寄存器
      偏移量:
  1/12位立即数
     ldr r0, [r1]
     ldr r0, [r1, #0x8]
     ldr r0, [r1, #0x8]!
     ldr r0, [r1], #0x8

     ldrb r0, [r1,#0x8]
     strb r0, [r1,#0x8]

     str r0, [r1], #0x8

  2/寄存器
     ldr r0, [r1, r2]
     ldr r0, [r1, r2]!
     ldr r0, [r1], r2
  3/寄存器移位
     ldr r0, [r1, r2, lsl #2]
     ldr r0, [r1, r2, lsl #2]!
     ldr r0, [r1], r2, lsl #2

   mov r1, #0x20000000
   ldr r0, [r1]
   ldr r1, [r2]

   能不能直接操作r1?
      ldr r0, [r1, lsl #2]   不行!!!
      基址只能是寄存器!
   
半字和有符号字节的加载/存储指令地址
  ldrh r0, [r1]
偏移量是8位的立即数  
  ldrh r0, [r1, #8]
  ldrh r0, [r1, #8]!  
  ldrh r0, [r1], #8
偏移量可以用寄存器
  ldrh r0, [r1, r2]
  ldrh r0, [r1, r2]!
  ldrh r0, [r1], r2

1/字和无符号字节的加载存储
2/半字和有符号字节的加载存储
   两种情况地址模式有差异;
字和无符号的字节 偏移量是立即数时 12位
半字和有符号字节 偏移量是立即数时 8位
半字和有符号字节 偏移量没有寄存器移位方式
   相同的地方是:
     基址+偏移量的方式
练习:
   从地址0x30000000取出一个半字数据放
   到R3,怎么写?
   mov r0, #0x30000000
   ldrh r3, [r0]
把地址单元0x30000000的BIT8取反,怎么写?
   mov   r0,#0x30000000
   ldr   r3, [r0]
   eor   r3, r3, #0x100
   str   r3, [r0]
 
ldmia  r0, {r1, r2, r3, r4, r5}  
ldmia  r0, {r1, r3, r5}  
ldmia  r0, {r1-r5}  

 从r0指向的存储单元读取5*4字节
 分别放到r1,r2,r3,r3,r5 5个字

寄存器列表里面:
  寄存器号从左边开始,从小到大
  可以不连续,寄存器之间用","分隔
  当寄存器号是连续的,可以是-连接,进行
  简写;
  ldmia  r0, {r1-r5}
ldmia  r0,{r1,r2,r3,r4,r6,r9,r10,r11, r14}  
可以改写为
ldmia  r0, {r1-r5, r9-r11, r14}  
   小号寄存器对应存储在低地址(内存)

   寄存器r0,r1对于软件来说是没有地址的;
   r0,r1,r2
   寄存器在ARM核里面;
   小号寄存器,每个有个编号,从0编号的15
   寄存器列表里面寄存器的号从左边开始
   依次增加;
   ldmia  r0, {r1-r5}
   现在提的r0,r1和之前学模式是r0,r1
   是不是一个;
       我们说的寄存器和之前学模式的时候
       提到的寄存器是一样的;
   r0寄存器只有4个字节,怎么能后面的
     4个寄存器赋值呢?
   
   r0里面放到的是4个字节的一个值,
   这个值是什么?
      R0里面放到的是基址;
      R0=0x30000000
   从0x30000000 读取5个字放到r1-r5
   0x30000000 一个字放到r1
   0x30000004 一个字放到r2
   0x30000008 一个字放到r3
   0x3000000C 一个字放到r4
   0x30000010 一个字放到r5

   stmia  r0!, {r1-r5}
       r0=r0+5*4
   
  ldmia  r0, {r1, pc}^
  加载指令里面如目标寄存器含有PC加^
     CPSR=SPSR的动作
  ^ 的功能包括:CPSR=SPSR

  ldmia  r0, {r1, r12}^
  stmia  r0, {r1, r10}^ 
  这种情况下,^表示的是:
  特权模式下使用该指令时,使用的用户模式
  访问存储器的方式(包括寄存器和权限);
  这个类不能在用户模式使用;



  stmia  r13!, {r0, r1, r4}
  
  ldmdb  r13!, {r0, r1, r4}

  stmdb  sp!, {r0,r1,r4}
  @入栈  满减栈

  ldmia  sp!, {r0,r1,r4}
  @出栈  满减栈
  
  msr  cpsr_f, #0x80
       只修改cpsr的高8位
  msr  cpsr_c, #0x80
       仅仅修改CPSR的低8位
  msr  cpsr_xc, #0x80  
       仅仅修改CPSR的低16位
  msr  cpsr_sxc, #0x80  
       仅仅修改CPSR的低24位
  msr  cpsr_fsxc, #0x80  
       整个都修改
  msr  cpsr, #0x80  
       全修改
  msr  spsr, r0
  mrs  状态寄存器读取指令
  怎么记忆?
  mov mvn
  
  mov pc,   lr
  mvn r0,   #0
  msr cpsr, r0
  mrs r0,   cpsr
  s---状态寄存器
  r---arm寄存器

   读取状态寄存器到r3
   mrs  r3, cpsr
   用r0修改状态寄存器
   msr  cpsr, r0
   使用状态寄存器注意:
     保证只修改我要修改的位,而其他位
     保持不变;
         读取-修改-写回;

     同时不使用和修改预留位;
     

ADR伪指令
   取标号的值放到寄存器
   (使用相对的方法来得到标号值)

   ADR R1, Delay
   ...

Delay:
   MOV R0, R14

  ldr r0, [r1]
  ARM的加载指令

  LDR R3, =0x12345678
      R3=0x12345678
  LDR R3, =0xFFFFFFFF

  LDR R1, =TestData
  LDR R0, [R1]      r0=0x12345678
  ...
TestData:
  .word 0x12345678

  LDR R1, TestData
    表示取TestData的内容
    该语句执行完,R1=0x12345678

    .text
main: 
    ldr r1, =0x1234
    @r0=r1
    mov r0, r1 
    
by:
  .byte 20,21,0xff,11

w:
  .work 0x12345678

str:
   .ascii  "abcdef\0"

str2:
   .asciz  "123423535"
str3:
   .string "aadfdsafasdf"
   
  .ascii 分配的字符串,后面不会自动
        加'\0'

s:
  .space  100

  .text
  .code 32
test:
   mov r0, r1
   ...
cd:
   .word 0


   .data
d:
  .word 0

   .bss
bs:
   .space 10
  




    


    
   .text
   .code 32
   .global a_strcmp
@两个参数
@r0   第一个字符串的地址
@r1   第二个字符串的地址
@返回值:
@  相等:返回0
@不相等:返回非0
@   R0 表示返回值
a_strcmp:
    ldrb  r2, [r0]
    ldrb  r3, [r1]
    
    mov pc,lr

main:
   ldr  r0, =str1
   ldr  r1, =str2   
   bl a_strcmp
   @r0 
   b   .

str1:
   .asciz  "1234"
str2:
   .asciz  "1235"
   

   .end

   






