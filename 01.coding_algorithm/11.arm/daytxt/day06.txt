问题分享:
   1/使用笔记本,和开发板连接
      笔记本没有串口,该怎么办?
      用USB转串口
        看系统:winxp,win7,win8
            相关的驱动
            USB 3.0 
        ubuntu 一看ubuntu支持不支持
            不支持你需要自己装驱动
    2/直接使用ubuntu也不装虚拟机;
       /dev/ttyUSB?
       /dev/ttyUSB0
    3/可以kermit跟我们在虚拟机里面配置
       一样 /dev/ttyUSB0  /?
       minicom
    4/还显示set line
       需要注意当前用户对/dev/ttyUSB0
       有没有使用权限;
       sudo  kermit
       sudo  minicom

回顾:
   在T-PAD开发板上如何读取nand flash
   的ID?
      我们使用CPU是S5PV210
          使用的nand flash 是K9K8G08U0B
      我们就需要看这个设备的手册;

   前提:对S5PV210的nand 控制器
   进行配置.

   读去ID的大概步骤:
   1/片选信号拉低(是nand flash工作)
   2/向S5PV210的nand flash控制器的
      命令寄存器写入0x90(命令)
   3/地址寄存器写入0x00(地址)
   4/延时
   5/从数据寄存器读取ID值(5个字节)
   6/片选信号拉高(禁止nand flash)
读取nand flash一页的大概步骤?
   1/拉低片选(控制寄存器BIT1)
   2/清除RnB跳变标志(状态寄存器BIT4)
      写1
   3/向命令寄存器写0x0(命令)
   4/向地址寄存器写页内偏移地址
      2个周期
   5/向地址寄存器写页号
      3个周期
   6/向命令寄存器写0x30(命令)
   7/等待RnB的跳变标志(1)
      状态寄存器的BIT4 为1
   8/从数据寄存器读取数据(2048字节) 
   9/片选信号拉高

思考问题:
   在我们shell程序main.c中,有一天全局的
   字符数组,没有初值,按照c规则,没有
   初值的全局变量应该0,但是我们通过
   查看数组的内容发现,我们的数组并不是
   0,为什么?
   这个问题你们自己思考;
   暂时我们不解答;

最简单的连接脚本文件:
只有段信息
SECTIONS
{
   . = 0x20008000;
   .text : 
   {
      /*代码段里面放的内容*/
      main.o (.text);
      *.o  (.text);
   }
   .rodata :
   {
      *.o (.rodata);
   }
  
   .data : 
   {
      *.o (.data);
   }
   __bss_start = .;  /*我们定义常量*/
   .bss :            /*连接器自动作为全局*/
   {                 /*常量,C和汇编中可用*/  
      *.o (.bss);
   }
  __bss_end = .;
}
希望某个段的起始地址按某种对其方式
如何处理?
   .  = ALIGN(?)
   .  = ALIGN(4)  按四字节对齐

使用时
arm-linux-ld -T shell.lds

任务: 
前提:我们闪存驱动,已经实现了从闪存
      中读取数据到内存的功能
    
    在shell中增加一个命令
    这个命令完成从闪存(nand flash)加载
    内核(linux)并且调用执行内核程序;


    linux内核的可执行文件,我们提供
    一个已经做好的镜像文件 Image
    arm资源包 08目录下有个Image;
 目录:arm-resource\arm课程资源\arm\08
    
    1/通过uboot命令把Image文件写入到
       nand flash(闪存)
       写到闪存的什么位置呢?
       建议:0x600000 (不包含64字节)
       下载方式:网络 tftp
                 usb  dnw
       写入闪存
       建议使用位置0x600000开始,大小12M
nand erase 0x600000 0xc00000
nand write 20008000 0x600000 0xc00000
       注意:在6M开始 12M
           nand flash这个区域有坏块
           nand erase 命令擦除时
       如果有坏块它提示;
       如果提示该区域有坏块,我们如何
       保证能正确读取内核并加载?
       1/uboot里面nand write命令对
          坏块的处理方式,简单跳过;
          我们自己写代码加载的时候,
          也需要跳过坏块;
       2/我们写入的时候换个位置;
          1G空间,你从6M往后一定能找到
          一个连续12M没有坏块的空间;
          先用这种方式;
          记录下来你把Image文件写到
          nand flash的位置;
    下一个动作:
    写cmd.c里面增加命令读取并执行我们
    linux内核程序;
     从nand flash 把Image程序读都内存
     读到内存的什么位置呢?
     地址:0x20008000 
     又有问题,什么问题?
       shell的代码段的起始地址0x20008000
     地址冲突,发生覆盖;
     解决方法,修改shell的起始地址;
     修改0x2300000
     为什么修改成这个地址?
        没有为什么;
        我们自己处理时,只要放的位置
        是合法内存地址范围(1G内存,
        从地址0x20000000开始1G)
        其二不和其他软件冲突;
        uboot占用的地址0x23e00000
        linux内核会占用:0x20008000 12M
        我们选的这个位置不和其他冲突
        0x23000000
         
        将来shell.bin需要下载到内存什
        么位置,运行是go什么位置?

        之前做实验:
        loadb 20008000
        go 20008000

        修改后就应该使用
        loadb 23000000
        go 23000000
        


kernel_start(0, 2456, 0);
    //第一个参数:0 ,内核里面不是用了
    //第二个参数:当编译内核时,为开发板指定
    //            内核启动时,它判断引导程序
    //            给内核传递过来值和编译内核时
    //            指定的是否一样,如果一样
    //            内核继续执行,如果不一样
    //            内核就停止执行;
    //第三个参数:引导程序和内核传递参数的内存地址
    //            其他参数通过内存,内核根据给定
    //            地址找参数;
    //            我们这里面给0是因为,我给你们的内核
    //            Image是使用默认参数,不需要引导程序
    //            传递的,所以给0





精简指令集(RISC)设计思想包括:
1/指令功能比较简单
   指令能做到单周期执行
2/指令定长
3/所有的数据运算都在寄存器中完成
   补充:
   这里寄存器不是我们做接口时S5P210的
   集成不同;
   处理器核心内部的寄存器(正在的寄存器)
   这些寄存器对软件来说是没地址的;
4/寄存器数量要多
5/专门有和存储器打交道的指令
   加载/存储指令

ARM处理器基于RISC思想
但是做了一些改进;
  增加多媒体指令(非单周期)
  增加了一种指令集THUMB指令集(16位)
    关于代码密度的问题;
    精简指令集架构代码密度方面不如
    复杂指令集,ARM处理器为了提高
    代码密度,增加了THUMB指令集(16位)
    
    1/THUMB指令集是ARM指令集的子集
    2/THUMB指令集比ARM指令集的代码
       密度高
    3/有一种情况下THUMB指令集的性能
       好于ARM指令集的性能;
       当硬件的系统里面数据线比较少
       (窄带数据线)16位 8位
    4/THUMB-2 指令集
       32位和16位混合型指令
       介于ARM指令集和THUMB指令集之间
       代码密度接近THUMB指令集
       代码性能接近ARM指令集;          
           
ARM7TDM处理器
   3级流水线:取指/解码/执行
   PC(寄存器)里的值保存是取指的地址

   ARM指令集中三级流水线情况下,
   PC的值和正在执行的指令的地址的关系?

   是不是查4个字节?
   不一定,有三个单元
   差8字节?

0x00 ADD  PC=0 
0x04 SUB  PC=4  SUB 被取,ADD解码
0x08 AND  PC=8  AND被取,SUB解码,ADD执行
0x0C    ORR
   PC=执行指令的地址+8(ARM指令集)
   PC=执行指令的地址+4(ARM指令集)
   取指和执行之间是差2条指令
ARM9TDMI
   5级流水线中:取指/解码/执行/
                访存/写回
   软件优化:
       int b;
       b = 1;
       去掉无用代码
       调整指令顺序
问题:
    在ARM9TDMI的五级流水线中
    PC的值和执行指令的地址的关系是什么?
    以ARM指令集为例;
    PC-8 = 执行指令的地址
    THUMB指令集 PC-4=等于执行指令的地址;
编程模型里面:
    工作模式
    工作状态
    寄存器组织
    异常
    以上4者的关系
    工作模式:7种:管理/快速中断/中断
                   中止/未定义/系统
                   用户
    分类:非特权模式:用户
          特权模式:其他6种
          非异常模式:用户和系统
          异常模式:其他5种异常模式
    切换:切换有两种情况/
          处理器自动切换
              当异常(事件)发生时,
              处理器会自动进入和异常对应
              模式,如:发生了高优先级中断
                     进入到快速中断模式

          使用指令切换
             注意:我们可以在特权模式间
                   使用指令切换;
                也可以使用指令从特权模式
                切换到用户模式,但是无法
                使用指令从用户模式切换到
                特权模式;
          用户模式没有权限切换到特权;
          用户模式如果需要进入到特权模式
          ARM处理器提供一种机制:使用
          SWI软中断指令;
      
 
   



  
 








      









