回顾:
    ARM 指令集
    主要掌握:分支/数据处理/加载/存储
    分支:B  BL  BX
       B  BL 相对跳转指令
          B指令的机器码,高8位指令码,
             低24位是跳转的偏移量
       正负32M
       BL指令是子函数调用指令
         当BL执行时,硬件会把BL指令的
         下一条指令地址保存到LR
         子程序返回就是把LR复制给PC
    数据处理指令:
        数据传送指令:MOV MVN
        算术运算指令:ADD/ADC
                      SUB/SBC
                      RSB/RSC
        位操作指令:AND/ORR/EOR/BIC
        比较测试指令:CMP/CMN
                      TST/TEQ
    注意:当数据处理指令加"S"的问题
       如果不加"S"数据处理指令(除比较
       指令外)不影响CPSR;
       加"S"有两种情况:
         目标寄存器是R15的情况:
             CPSR=SPSR  
         目标寄存器不是R15的情况
             根据指令的运算结果修改
             CPSR的条件标志位;
             不同的指令修改标志位不同;
    数据处理指令写法的变化取决于OP2的格式
    OP2的格式有:
      1/8位图立即数
      2/寄存器
      3/寄存器移位
   加载存储/指令
      单寄存器的加载存储 LDR STR
      多寄存器的加载存储 ldm stm
   ldr  r0, [r1]
   单寄存器的加载存储的指令的变化
   取决于地址模式
       地址模式是:基址+偏移量
           基址就是保存在寄存器
           偏移量会多种变化
           字和无符号字节的加载/存储
             偏移量的构成:
                12位立即数
                寄存器
                寄存器移位
               ldr r0,[r1,#08]
               ldr r0,[r1,#08]!
               ldr r0,[r1],#08
           半字和有符号字节的加载/存储
              偏移量构成:
                 8位立即数
                 寄存器
   多寄存器的加载/存储也有地址模式
   ldmia  r0, {r1, r3, r5}
   ldmib  r0, {r1, r3, r5}
   ldmda  r0, {r1, r3, r5}
   ldmdb  r0, {r1, r3, r5}
   寄存器列表中的寄存器号从左向右依次变大
   而且寄存器号小的对应内存的低地址;
   ldmdb  r0!, {r1, r3, r5}
   ! 表示更新基址;
   
   ldmdb  r0!, {r1, r3, r5}^
   ^ 作用分两种情况:
     当加载指令,寄存器列表中含有PC时候
     除了完成加载动作外,还有把CPSR=SPSR
   ^ 另外一种情况:
     stm和ldm寄存器列表不含PC
     是特权模式访问存储器使用的用户模式
     的寄存器和权限;
   另外不要在用户模式使用 ^
   也不要在系统模式使用ldm寄存器列表含义
   PC且加^


C和汇编混合编程的时候ATPCS标准中
  R0-R3用来传递函数参数
       R0-R3放不下下的参数,通过栈来传递
  子函数中需要使用r0-r3的话,不需要保护
  r0-r3之前的值;(调用子函数之前的值)
  当你调用一个子函数的时候,你不能假定
  子函数不破坏r0-r3

子函数的返回值:R0
   如果R0放不下,R0,R1
   
  C语言程序调用汇编子程序
  1/汇编语言中要把函数声明全局
     函数编写规则:参数传递和返回
                值需要遵守ATPCS规则
  2/C语言当中怎么处理
     声明函数原型
     按照C语言调用子函数的方式调用子函数
  C语言中的函数名汇编函数中函数名
  一样;
  例子:
  .text 
  .code 32
  .global mystrcopy
mystrcopy:
  ldrb r2, [r1], #1
  strb r2, [r0], #1
  cmp  r2, #0
  bne mystrcopy
  bx lr

main.c

extern void mystrcopy(
        char *str1, 
        const char *str2);

int main(void)
{
   char buf[256];
   mystrcopy(buf, "ABCD")  
}

   编译时怎么办?
     汇编程序使用汇编器汇编成 .o
     C程序使用编译器编译.o
   把.o文件连接成可执行文件;
   能不能把汇编和c写到一个文件?
     通常不这样做;
     如果要做,C语言内嵌汇编的方式;
     不通的编译器内嵌汇编的语法不同;
   
   汇编调用C程序该怎么做?
   1/C语言的函数要声明成全局
   2/汇编程序中
      声明该函数为外部的
      使用时是使用bl指令调用,调用
      要根据函数是否使用参数来传递参数
      规则r0-r3和栈
      调用完函数需要判断返回值,判断
      r0,或者r0和r1

int add4(int a,int b int c int d)
{
    return (a + b + c +d);
}

yy.s
   .extern add4

   mov r0, #1
   mov r1, #2
   mov r2, #3
   mov r3, #4
   bl add4
   @r0 10

  案例解决两个问题:
   汇编调用C程序如何处理?
    start.s 
      bl  main
   C语言程序调用汇编程序如何处理?      
     C中调用了 a_strcmp这个汇编函数
  解决另外一个问题:
    main.c 我们定义了一个buf[]
    默认buf[]里面应该是全0的
    我们main中查看,它却不是全0
  如何解决?
    在start.s中增加清除bss段代码;
  解决这个问题更多希望让你们明白
在写应用程序时,在main执行前,其实
已经有一段代码执行了,清除bss段;
所以c程序中,没有初值的全局变量和
初值为0的全局变量,默认是0
 MOVS PC,LR
   PC=LR
   CPSR=SPSR
 SUBS PC, LR, #4
   PC=LR-4
   CPSR=SPSR
 LDMFD SP!, {PC}^
   PC=??
   CPSR = SPSR
从软中断异常和未定义指令异常返回
  MOVS PC, LR
    PC=LR
    CPSR=SPSR
  SUBS PC, LR, #0
    PC=LR
    CPSR=SPSR
  STMFD SP!, {LR}
  LDMFD SP!, {PC}^
从中断/快速中断,指令预取异常返回
  SUBS PC,LR,#4
    PC=LR-4
    CPSR=SPSR
  异常处理程序入口
    sub lr, lr, #4
    stmfd sp!, {lr}
  返回处
    ldmfd sp!, {pc}^
数据异常返回时:
  SUBS PC,LR,#8
    PC=LR-8
    CPSR=SPSR
为什么缺一种?
   7种异常,我们讲6种异常返回方法
   少了reset
   复位异常是不返回
   关机;
   
软件中断和未定指令返回PC=?
  PC=LR
FIQ IRQ 预取异常PC=?
  PC=LR - 4
数据异常
  PC=LR - 8

 swi 0x24
 add r0,r1,r2
 在swi异常处理程序里面,我想得到swi指令的
 这个号:
    号在swi指令码
    要得到swi指令的机器码
    得知道swi 0x24指令的地址
    
    1/根据lr可以得到swi 0x24的指令的
       地址
    2/用加载指令获得swi 0x24的指令码
       ldr r0, [lr,-4]
       bic r0, r0, #0xFF000000
    要考虑:
    是在ARM状态执行的swi 0x24
    还是在THUMB状态执行的swi 0x24
       如果是在Thumb状态下面执行的
       swi 0x24
       
       ldrh r0,[lr, -2]
       and  r0, r0, #0x00FF

    执行的swi异常处理程序只有一个
    所以我要在swi异常处理程序里面
    区分发生swi异常前,是在arm状态
    还是thumb状态;

    根据CPSR,SPSR
    根据SPSR,响应异常的时侯,CPSR的
    状态位(T)已经变化;
    因为之前说了,发生异常后,硬件自动
    进入ARM状态;发生异常时,硬件自动
    把之前的CPSR的值复制到SPSR(即将进入
    模式的SPSR)了;
    所以我们根据SPSR的T位就能判断出来
    发生swi异常前,处理器是ARM状态还是
    THUMB状态;SPSR的BIT5
    BIT7  I
    BIT6  F
    BIT5  T
    BIT4:BIT0 mode
    如何判断SPSR的BIT5是0还是1?
        MRS  R0, SPSR
        ANDS R0, R0, #0x20
        LDREQ R0, [lr, -4]
        BICEQ R0, R0, #0xFF000000
        LDRNEH R0, [lr, -2]
        ANDNE  R0, R0, #0x00FF
   以上代码就可以正确取得swi 0x24
   指令中的号(0x24)
   
  什么 watchdog ?
       家里面有路由器,路由器死机?
       重启;

       青藏线,有个小车站(无人值守)
           监控,网络,路由器
    监控系统软件是否正常工作,如果它发觉
    软件死机,它自动复位系统;
    
    它如何发现软件是否正常工作?
        软件主动告诉它,软件是否正常工作;
    相对于定时器,定时复位系统;
      软件就定时你别复位;
      软件怎么告诉你别服务;
        恢复它技术初值;
    软件告诉它不要复位的动作称为"喂狗"             
    
    irq_uboot.tar
    
    cp -a shell irq
    修改irq目录下内容
      把irq_uboot.tar 解压,把里面的
      *.c *.h *.s 复制到irq目录
      然后在irq的makefile中的
      OBJS中加入 *.c *.s对应的 ??.o
    shell.lds修改
        
       . = 0x20000000;
       .text :
      {
          vector.o (.text);
          main.o (.text);
          *.o (.text);
      }
  
     vector.s
        swi_test1:
           swi 1
        swi_test2:
           swi 2
     cmd.c中加入
         swi1 和 swi2命令
     
     vector.s
         修改swi异常处理程序
         加入取得软件中断号的代码

     irq.c
         修改C语言写的软中断异常处理程序;

    案例希望让大家明白一些关于异常处理
     的相关知识;
     ARM处理器里面异常向量表应该放在什么
     地址?
        地址0
     如何来写异常向量呢?
       vector.s
     我们要把vector.s里面异常向量表
     放到地址0
     
    流程:
     1/我shell命令行执行
        swi1或者swi2命令
     2/命令程序里面调用
        swi 1 或者swi 2
       产生软件中断
     3/硬件响应软中断
        cpu指定执行异常向量表(vector.s)
        中地址为08处指令
           ldr pc, _swi_hdl
        跳转到 vector.s中的
           _swi_handler
          (汇编写的软中断处理程序)     
     4/汇编写的软中断处理程序里面
        获取   swi 指令的号
        然后以号为参数调用
        C语言写的软中断处理程序
         irq.c中的c_swi_handler
     5/c语言处理程序里面
        根据号来不同的事情
        比如:号为1,led 亮
              号为2,led灭

           
     ARM处理器里面异常向量表应该放在什么
     地址?
        地址0
     如何来写异常向量呢?
       vector.s
     我们要把vector.s里面异常向量表
     放到地址0  
       
     S5PV210 ARM cortex A8核,它上电以后
     到什么地址执行指令?
         0
  S5PV210 从地址0执行代码,执行什么代码?
         IROM代码
     IROM地址0放的是三星自己写异常向量表;

     对于S5PV210而言,物理地址0能写吗?
        不能!
     我们写异常向量表放到哪里?
        放到地址0
     我们代码在物理地址0x20000000
     发生异常时CPU从地址0找到了我们
     异常向量表;

     我们开启MMU,MMU实现虚拟地址0
     到物理地址0x20000000变换;
      
     在MMU开启后,CPU给出地址都是虚拟
     地址;
     虚拟地址和物理地址一一对应;
     多个虚拟地址对应一个物理地址;
     
     虚拟地址/1M =得到转换的索引
                  数组下标
                  数组里面放的是
                  对应的物理的
                  起始位置;

     转换后的物理地址=
       虚拟地址%1M + 物理地址的起始位置
     


     

     

     
      




           

 










