运算符重载
智能指针



一/运算符重载
    重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表;
    
    1.1双目运算符
        L#R 
            成员函数 operator(R)
            全局    operator(L,R)
        + - * / %
        注意:+= *= /= %= ... 写成成员/全局均可,最好写成成员
            << >>
    1.2单目运算符
        - ~ ! ++ --
        默认放在操作数前面;
        #O    //成员函数形式 operator#()
            //全局函数形式 operator#(O)
                能是成员就写成成员函数形式;
                不能是成员才写成全局形式;
    1.3运算符的限制
        不能重载的运算符号有:
                .    .*    ::    sizeof    typeid(取得类型信息)    ?:
        不能对基本类型进行运算符重载
            必须有自定义的类型;//operator+(int,int)不合法;
        不能改变运算符号的特性,如不能把二元的重载成一元的;
        不能发明新的运算符;//a**b ,a$b统统不行
            只能重载为成员的运算符:
                    = //和拷贝构造(由一个对象生成另外一个对象)有所区别;
                        //赋值运算符是两个对象都已经存在了
                    []
                    ()
                    ->与 *    //可以做智能指针
            //最好是成员的+= -= /= *=
            //在构造函数前加explicit关键字,可以防止单参的默认转换;
    1.4只能是成员的运算符的举例
        内存那点儿事儿?
            在构造函数中 分配堆内存;
            在析构函数中 释放内存;
            在拷贝构造中 处理复制对象的内存;
            在赋值运算符函数中 处理赋值对象和被赋值对象的内存;
        []运算符返回值如果是引用就代表可以作为左值;
            返回值如果是值类型则代表只读,只能做右值;
            参数一般是整数类型,可以是其他类型char,double,string等;
            
        ()运算符可以做函数对象(一个对象可以像函数一样来使用);还可以做类型转换;
        
        ->和*运算符重载可以把不是一个指针的对象,当作指针来使用;可以实现智能指针;

智能指针
c++里面的四个智能指针: auto_ptr, shared_ptr, weak_ptr, unique_ptr 其中后三个是c++11支持，并且第一个已经被c++11弃用;

为什么要使用智能指针:
c++的内存管理是让很多人头疼的事,当我们写一个new语句时,一般就会立即把delete语句直接也写了,
但是我们不能避免程序还未执行到delete时就跳转了或者在函数中没有执行到最后的delete语句就返回了,如果我们不在每一个可能跳转或者返回的语句前释放资源,就会造成内存泄露;
使用智能指针可以很大程度上的避免这个问题,因为智能指针就是一个类,当超出了类的作用域时,会自动调用析构函数,析构函数会自动释放资源;
auto_ptr （官方文档）
class Test {
public:
    Test(string s) {
       str = s;
       cout<<"Test creat\n";
    }
    ~Test() {
        cout<<"Test delete:"<<str<<endl;
    }
    string& getStr() {
        return str;
    }
    void setStr(string s) {
        str = s;
    }
    void print() {
        cout<<str<<endl;
    }
private:
    string str;
};
 
int main() {
    auto_ptr<Test> ptest(new Test("123"));
    ptest->setStr("hello ");
    ptest->print();
    ptest.get()->print();
    ptest->getStr() += "world !";
    (*ptest).print();
    ptest.reset(new Test("123"));
    ptest->print();
    return 0;
}

output:
Test creat
hello 
hello 
hello world !
Test creat
Test delete:hello world !
123
Test delete:123

如上面的代码,智能指针可以像类的原始指针一样访问类的public成员,成员函数get()返回一个原始的指针,成员函数reset()重新绑定指向的对象,而原来的对象则会被释放;
注意我们访问auto_ptr的成员函数时用的是“.”,访问指向对象的成员时用的是“->”;
我们也可以声明一个空智能指针auto_ptr<Test>ptest();

当我们对智能指针进行赋值时,如ptest2 = ptest;
ptest2会接管ptest原来的内存管理权,ptest会变为空指针,如果ptest2原来不为空,则它会释放原来的资源,基于这个原因,应该避免把auto_ptr放到容器中,因为算法对容器操作时,很难避免STL内部对容器实现了赋值传递操作,这样会使容器中很多元素被置为NULL;
判断一个智能指针是否为空不能使用if(ptest == NULL),
应该使用if(ptest.get() == NULL);
还有一个值得我们注意的成员函数是release,这个函数只是把智能指针赋值为空,但是它原来指向的内存并没有被释放,相当于它只是释放了对资源的所有权;
当我们想要在中途释放资源,而不是等到智能指针被析构时才释放,我们可以使用ptest.reset();语句;

new / delete重载
void* operator new(size_t size/*类型大小*/){}
void operator delete(void* par){}

