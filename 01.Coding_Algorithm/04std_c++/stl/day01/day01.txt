函数模板
类模板
模板的特化


模板和STL
一/为什么需要模板?
	$nm a.out
	1.为同一种数据结构或者算法,定义适用于不同类型的版本---代码冗余;
	范例:typed.cpp
	2.借助于参数宏摆脱类型的约束,同时也丧失了类型安全----潜在风险;
	范例:untyped.cpp
	3.让预处理器自动生成针对不同类型的版本-----不易于调试;
	范例:macro.cpp
	4.编写带有参数化类型的通用版本,让编译器自动生成针对不同类型的具体版本---模板;
	范例:functmpl.cpp
二/函数模板
	1.函数的返回值/参数表和局部变量都可以使用类型参数;
	定义:
		template<typename 类型形参名1,类型形参名2,...>
		返回类型 函数模板名(形参表){
			函数体
		}
	调用:
		函数模板名<类型实参1,类型实参2,...>(实参表列);
	2.函数模板的类型参数支持隐式推断;
	范例:deduction.cpp
	3.函数模板的重载
	形参表不同的同名函数模板之间,以及函数模板和同名具体函数之间,都可以构成重载关系;
	范例:funcover.cpp
三/类模板
	1.类的成员函数/成员变量和基类都可以含有参数化的类型,这样的类就是类模板;
	范例:clstmpl.cpp
	定义:
		template<typename 类型形参名1,类型形参名2,...>
		class 类模板名:继承表 {
			成员定义
		};
	实例化:
		类模板名<类型实参1,类型实参2,...> 对象名(构造实参表);
	类模板-实例化->类-实例化->对象
		编译期		运行期
	2.类模板的静态成员变量,每一个实例化类各有一份;
	范例:static.cpp
	3.类模板的模板参数可以带有缺省值
	范例:defarg.cpp
	如果某个模板参数带有缺省值,那么它后面的所有参数都必须带有缺省值;
	注意:函数模板的参数不能带有缺省值;因为这样会引起冲突;
四/模板的特化
	1.对于某些特定类型而言,通用模板可能并不适用;
	2.可以为通用模板去提供一种特殊化的定义,作为一般情况之外的特例,为编译器提供一种更为合适的选择;
	3.对于类模板,既可以将整个类模板全部特化,也可以只针对与具体类型相关的个别成员函数进行特化;
	注意:使用成员特化时,特化版本和通用版本的规格必须完全一致;
五/编译模型
	1.后期编译
		1.模板定义只是一种规范描述,而非真正的类型定义;当编译器看到模板定义时,仅做一般性的语法检查,同时保存一份模板的内部表示,并不生成二进制指令;
		2.当编译器看到模板被实例化为具体函数或类时,才会真正用模板的内部表示结合类型实参,生成指令代码;
		3.每个C++语言的源文件是单独编译的,因此编译器仅在编译包含模板定义的源文件时保存其内部表示;
		4.如果模板的实例化与它的定义不在同一个编译单元,模板就会失去被编译的机会,进而导致连接错误;
	2.包含模型
	 	1.将模板的声明和定义放在一个头文件中,或者在其声明头文件中通过#include预编译指令包含定义该模板的源文件;这样的头文件也可以以.hpp结尾;
		2.包含模型的缺陷:
		A 暴露了用户不希望或者不应该了解的实现细节;
		B 模板被多个源文件包含会延长编译时间;
	3.分离模型
		在定义模板的源文件中加入一个export声明;
		export template<typename T>
		class Comparator;
		#include "clstmpl.h"
		template<typename T>
		Comparator<T>::Comparator(...){...}

		当编译器看到某个模板被声明为导出(export)型,会将该模板的内部表示缓存到一个临时文件中;当编译器编译到对该模板的实例化代码时,再从这个临时文件中重新读取其内部表示,完成编译和连接;
		注意:目前绝大多数的编译器都不支持分离模型,而且已经从C++(2011)标准中删除,并将export关键字移做它用;
六/类模板的局部特化//函数模板是不可以局部特化的;
	1.针对部分类型参数取特定类型进行特化;
		编译器会优先选择特化程度最高的版本;
	2.针对类型参数之间的某种关联性进行特化;
		编译器会优先选择匹配程度最高的;
	3.针对指针或者数组进行特化;
		编译器会优先选择针对指针或者数组的特化版本;
	范例:partial.cpp
	注意:当编译器发现同时存在多个匹配程度一样的版本时,会报告歧义candidates错误;
七/非类型参数
	1.模板既可以带有类型参数,也可以带有非类型参数;传递给非类型参数的实参只能是常量,常量表达式,或者带有常属性的且不具备挥发性(volatile)的变量;
	2.类模板的非类型参数和类型参数一样,也可以带有缺省值;
八/模板的嵌套和递归
	Arry<int>
	List<Arry<int> > la;//数组链表
	Arry<List<int> > al;//链表数组
	Arry<Arry<int> > aa;//两个右尖括号中间最好加一个空格;
	范例:tt.cpp
九/模板型模板实参
	范例:tta.cpp
十/类模板中的模板函数
	范例:ttf.cpp
十一/class和typename
class		类
typename	解决嵌套依赖
