函数模板
类模板
模板的特化


模板和STL
一/为什么需要模板?
	$nm a.out
	1.为同一种数据结构或者算法,定义适用于不同类型的版本---代码冗余;
	范例:typed.cpp
	2.借助于参数宏摆脱类型的约束,同时也丧失了类型安全----潜在风险;
	范例:untyped.cpp
	3.让预处理器自动生成针对不同类型的版本-----不易于调试;
	范例:macro.cpp
	4.编写带有参数化类型的通用版本,让编译器自动生成针对不同类型的具体版本---模板;
	范例:functmpl.cpp
二/函数模板
	1.函数的返回值/参数表和局部变量都可以使用类型参数;
	定义:
		template<typename 类型形参名1,类型形参名2,...>
		返回类型 函数模板名(形参表){
			函数体
		}
	调用:
		函数模板名<类型实参1,类型实参2,...>(实参表列);
	2.函数模板的类型参数支持隐式推断;
	范例:deduction.cpp
	3.函数模板的重载
	形参表不同的同名函数模板之间,以及函数模板和同名具体函数之间,都可以构成重载关系;
	范例:funcover.cpp
三/类模板
	1.类的成员函数/成员变量和基类都可以含有参数化的类型,这样的类就是类模板;
	范例:clstmpl.cpp
	定义:
		template<typename 类型形参名1,类型形参名2,...>
		class 类模板名:继承表 {
			成员定义
		};
	实例化:
		类模板名<类型实参1,类型实参2,...> 对象名(构造实参表);
	类模板-实例化->类-实例化->对象
		编译期		运行期
	2.类模板的静态成员变量,每一个实例化类各有一份;
	范例:static.cpp
	3.类模板的模板参数可以带有缺省值
	范例:defarg.cpp
	如果某个模板参数带有缺省值,那么它后面的所有参数都必须带有缺省值;
	注意:函数模板的参数不能带有缺省值;因为这样会引起冲突;
四/模板的特化
	1.对于某些特定类型而言,通用模板可能并不适用;
	2.可以为通用模板去提供一种特殊化的定义,作为一般情况之外的特例,为编译器提供一种更为合适的选择;
	3.对于类模板,既可以将整个类模板全部特化,也可以只针对与具体类型相关的个别成员函数进行特化;
	注意:使用成员特化时,特化版本和通用版本的规格必须完全一致;
五/编译模型
	1.后期编译
		1.模板定义只是一种规范描述,而非真正的类型定义;当编译器看到模板定义时,仅做一般性的语法检查,同时保存一份模板的内部表示,并不生成二进制指令;
		2.当编译器看到模板被实例化为具体函数或类时,才会真正用模板的内部表示结合类型实参,生成指令代码;
		3.每个C++语言的源文件是单独编译的,因此编译器仅在编译包含模板定义的源文件时保存其内部表示;
		4.如果模板的实例化与它的定义不在同一个编译单元,模板就会失去被编译的机会,进而导致连接错误;
	2.包含模型
	 	1.将模板的声明和定义放在一个头文件中,或者在其声明头文件中通过#include预编译指令包含定义该模板的源文件;这样的头文件也可以以.hpp结尾;
		2.包含模型的缺陷:
		A 暴露了用户不希望或者不应该了解的实现细节;
		B 模板被多个源文件包含会延长编译时间;
	3.分离模型
		在定义模板的源文件中加入一个export声明;
		export template<typename T>
		class Comparator;
		#include "clstmpl.h"
		template<typename T>
		Comparator<T>::Comparator(...){...}

		当编译器看到某个模板被声明为导出(export)型,会将该模板的内部表示缓存到一个临时文件中;当编译器编译到对该模板的实例化代码时,再从这个临时文件中重新读取其内部表示,完成编译和连接;
		注意:目前绝大多数的编译器都不支持分离模型,而且已经从C++(2011)标准中删除,并将export关键字移做它用;
六/类模板的局部特化//函数模板是不可以局部特化的;
	1.针对部分类型参数取特定类型进行特化;
		编译器会优先选择特化程度最高的版本;
	2.针对类型参数之间的某种关联性进行特化;
		编译器会优先选择匹配程度最高的;
	3.针对指针或者数组进行特化;
		编译器会优先选择针对指针或者数组的特化版本;
	范例:partial.cpp
	注意:当编译器发现同时存在多个匹配程度一样的版本时,会报告歧义candidates错误;
七/非类型参数
	1.模板既可以带有类型参数,也可以带有非类型参数;传递给非类型参数的实参只能是常量,常量表达式,或者带有常属性的且不具备挥发性(volatile)的变量;
	2.类模板的非类型参数和类型参数一样,也可以带有缺省值;
八/模板的嵌套和递归
	Arry<int>
	List<Arry<int> > la;//数组链表
	Arry<List<int> > al;//链表数组
	Arry<Arry<int> > aa;//两个右尖括号中间最好加一个空格;
	范例:tt.cpp
九/模板型模板实参
	范例:tta.cpp
十/类模板中的模板函数
	范例:ttf.cpp
十一/class和typename
class		类
typename	解决嵌套依赖

范例
//Makefile

#target: prerequisites 
#	command
####################################################
# Author      : longbin
# Created date: 2020-03-25 10:39:42
####################################################

TARGET := a.out
SRC := template.cpp
SRC += template.test.cpp

NEEDED_CXXFLAGS += -std=c++11
NEEDED_CXXFLAGS += -pthread
NEEDED_CXXFLAGS += -D_GLIBCXX_USE_NANOSLEEP
CFLAGS = $(NEEDED_CXXFLAGS)

all:
	g++ $(CFLAGS) -o $(TARGET) $(SRC)

.phony: clean
clean:
	-rm -v $(TARGET)

//template.hpp
#ifndef __XX_COMM_H__
#define __XX_COMM_H__

#include <iostream>
#include <sstream>
#include <thread>
#include <mutex>
#include <queue>
#include <atomic>
#include <condition_variable>
#include <algorithm>

#define USE_SELF_DEFINED_QUEUE_CLASS 1

typedef std::string MsgQueueT;

using QueueMsgType = MsgQueueT;

//#define print(x) std::cout << __func__ << ">>" << __LINE__ << ">>" << #x << "# " << x << std::endl

template <class T>
T stringToNumber(const std::string &str)
{
    /* can auto remove leading 0 */
    std::istringstream iss(str);
    T number {};
    iss >> number;
    return number;
}

template <class T>
std::string toString(T value)
{
    std::ostringstream oss;
    oss << value;
    return oss.str();
}


template <class T>
class Singleton {
private:
   static T* m_pInstance;
   Singleton(const Singleton& src){(void)src;}
   Singleton &operator=(const Singleton& src){(void)src;};

   class Garbo
   {
   public:
      ~Garbo()
      {
         if (Singleton::m_pInstance)
         {
            delete Singleton::m_pInstance;
            Singleton::m_pInstance = NULL;
         }
      }
   };
   static Garbo garbo;

protected:
   Singleton(){}
   ~Singleton(){}

public:
   static T* getInstance()
   {
      if (m_pInstance == NULL)
      {
         m_pInstance = new T();
      }
      return m_pInstance;
   }
};

template <class T>
T* Singleton<T>::m_pInstance = NULL;


template<typename T>
class ConcurrentQueue {
public:
    ConcurrentQueue() {}
    ConcurrentQueue(int wait) : mWait{wait} {}

    void waitForItems() {
        std::unique_lock<std::mutex> gul(mLock);
        if (mWait > 0) {
            // block here until be notified or timeout
            if (mQueue.empty() && mIsActive) {
                mCond.wait_for(gul, std::chrono::milliseconds(mWait));
            }
        } else if (mWait == 0) {
            // unblock
            return;
        } else {
            // block here until be notified and valid item exist
            while (mQueue.empty() && mIsActive) {
                mCond.wait(gul);
            }
        }
    }

   bool pullAll(std::vector<T> &items) {
        MuxGuard g(mLock);
        if (mQueue.empty()) {
            return false;
        }
        while (!mQueue.empty()) {
            items.push_back(std::move(mQueue.front()));
            mQueue.pop();
        }
        return true;
    }

    bool pull(T &item) {
        MuxGuard g(mLock);
        if (mQueue.empty()) {
            return false;
        }
        if (!mQueue.empty()) {
            item = std::move(mQueue.front());
            mQueue.pop();
        }
        return true;
    }

    void push(T&& item) {
        MuxGuard g(mLock);
        if (mQueue.size() >= mMaxQueueSize)
        {
            /* pop queue head when queue is full */
            mQueue.pop();
        }
        mQueue.push(std::move(item));
        mCond.notify_one();
    }

    /* Deactivates the queue, thus no one can push items to it, also
     * notifies all waiting thread.
     */
    void deactivate() {
        MuxGuard g(mLock);
        mIsActive = false;
        mCond.notify_all();  // To unblock all waiting consumers.
    }

    //ConcurrentQueue() = default;
    ConcurrentQueue(const ConcurrentQueue &) = delete;
    ConcurrentQueue &operator=(const ConcurrentQueue &) = delete;
private:
    using MuxGuard = std::lock_guard<std::mutex>;
    int mWait = -1; // wait_for time, negtive for always block, 0 for unblock.
    bool mIsActive = true;
    size_t mMaxQueueSize = 5000;
    mutable std::mutex mLock;
    std::condition_variable mCond;
    std::queue<T> mQueue;
};


class MessageQueueBase:public Singleton<MessageQueueBase>
{
    friend class Singleton<MessageQueueBase>;
private:
    MessageQueueBase();
    std::unique_ptr<ConcurrentQueue<QueueMsgType>> m_Queue;

public:
    virtual ~MessageQueueBase();
    virtual void write(QueueMsgType &msg);
    virtual void waitForItems();
    virtual bool read(QueueMsgType &msg);
    virtual bool pullAll(std::vector<QueueMsgType> &vec);
    virtual void deactivate();
};


template<typename T>
class BatchingConsumer {
public:
    enum class State {
        INIT = 0,
        RUNNING = 1,
        STOP_REQUESTED = 2,
        STOPPED = 3,
    };

public:
    BatchingConsumer() : mState(State::INIT) {}
    virtual ~BatchingConsumer(){}

    BatchingConsumer(const BatchingConsumer &) = delete;
    BatchingConsumer &operator=(const BatchingConsumer &) = delete;

    using OnBatchReceivedProcFunc = std::function<void(const std::vector<T>& vec)>;

#if USE_SELF_DEFINED_QUEUE_CLASS
    virtual void run(MessageQueueBase* queue,
#else
    virtual void run(ConcurrentQueue<T>* queue,
#endif
                    std::chrono::nanoseconds batchInterval,
                    const OnBatchReceivedProcFunc& callback) {
        mQueue = queue;
        mBatchInterval = batchInterval;
        mWorkerThread = std::thread(&BatchingConsumer<T>::runInternal, this, callback);
    }

    void requestStop() {
        std::cout << __func__ << std::endl;
        mState = State::STOP_REQUESTED;
    }

    void waitStopped() {
        std::cout << __func__ << std::endl;
        if (mWorkerThread.joinable()) {
            mWorkerThread.join();
        }
    }

private:
    void runInternal(const OnBatchReceivedProcFunc& onBatchReceivedCallback) {
        std::vector<T> items;
        if (mState.exchange(State::RUNNING) == State::INIT) {
            while (State::RUNNING == mState) {
                mQueue->waitForItems();
                if (State::STOP_REQUESTED == mState) break;

                std::this_thread::sleep_for(mBatchInterval);
                if (State::STOP_REQUESTED == mState) break;

                items.clear();
                mQueue->pullAll(items);

                if (items.size() > 0) {
                    onBatchReceivedCallback(items);
                }
            }
        }

        mState = State::STOPPED;
    }

public:
    std::thread mWorkerThread;
    std::atomic<State> mState;
    std::chrono::nanoseconds mBatchInterval;
#if USE_SELF_DEFINED_QUEUE_CLASS
    MessageQueueBase *mQueue;
#else
    ConcurrentQueue<T>* mQueue;
#endif
};

#endif

//template.cpp
#include "template.hpp"

MessageQueueBase::MessageQueueBase()
{
    //m_Queue = std::make_unique<ConcurrentQueue<QueueMsgType>>(3000);
    m_Queue = std::unique_ptr<ConcurrentQueue<QueueMsgType>>(new ConcurrentQueue<QueueMsgType>(3000));
}

MessageQueueBase::~MessageQueueBase()
{
}

void MessageQueueBase::write(QueueMsgType &msg)
{
    //logv("write msg.size=%zu", msg.size());
    /* msgs cannot be used any more after push */
    m_Queue->push(std::move(msg));
}

void MessageQueueBase::waitForItems()
{
    //logv("read waitForItems");
    m_Queue->waitForItems();
}

bool MessageQueueBase::read(QueueMsgType &msg)
{
    bool ret = false;
    ret = m_Queue->pull(msg);
    if (ret == true)
    {
        //logd("read msg.size=%zu", msg.size());
    }
    return ret;
}

bool MessageQueueBase::pullAll(std::vector<QueueMsgType> &msg)
{
    bool ret = false;
    ret = m_Queue->pullAll(msg);
    if (ret == true)
    {
        //logd("read msg.size=%zu", msg.size());
    }
    return ret;
}

void MessageQueueBase::deactivate()
{
    //logi("deactivate");
    m_Queue->deactivate();
}

//template.test.cpp
/*****************************************
* Copyright (C) 2020 * Ltd. All rights reserved.
* File name   : template.test.cpp
* Created date: 2020-03-25 10:36:24
*******************************************/

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include "template.hpp"
using namespace std;

constexpr std::chrono::milliseconds TimeInterVal(5);

class MessageParser:public Singleton<MessageParser>
{
    friend class Singleton<MessageParser>;
    public:
        MessageParser();
        ~MessageParser();
        void onRecvMessage(const std::vector<MsgQueueT> &vec);
        void putMsgTest(MsgQueueT &val);
    private:
        void init();
        void deinit();
#if USE_SELF_DEFINED_QUEUE_CLASS
        MessageQueueBase *mqueue;
#else
        std::shared_ptr<ConcurrentQueue<MsgQueueT>> mqueue;
#endif
        BatchingConsumer<MsgQueueT> mBatchingConsumer;
};

MessageParser::MessageParser()
{
    init();
}

MessageParser::~MessageParser()
{
    deinit();
}

void MessageParser::init()
{
#if USE_SELF_DEFINED_QUEUE_CLASS
    mqueue = MessageQueueBase::getInstance();
    mBatchingConsumer.run(mqueue, TimeInterVal,
                            std::bind(&MessageParser::onRecvMessage, this, std::placeholders::_1));
#else
    mqueue = std::make_shared<ConcurrentQueue<MsgQueueT>>(3000);
    mBatchingConsumer.run(mqueue.get(), TimeInterVal,
                            std::bind(&MessageParser::onRecvMessage, this, std::placeholders::_1));
#endif
}

void MessageParser::deinit()
{
    mBatchingConsumer.requestStop();
    if (mqueue != NULL) {
        mqueue->deactivate();
    }
    mBatchingConsumer.waitStopped();
}

void MessageParser::putMsgTest(MsgQueueT &val)
{
    MsgQueueT value;
#if USE_SELF_DEFINED_QUEUE_CLASS
    value = val;
    mqueue->write(value);
#else
    value = val;
    mqueue->push(std::move(value));
#endif
}

void MessageParser::onRecvMessage(const std::vector<MsgQueueT> &vec)
{
    std::cout << "onRecvMessage begin" << std::endl;
    for (auto value:vec) {
        std::cout << "value: " << value << std::endl;
    }
    std::cout << "onRecvMessage end" << std::endl;
    std::cout << std::endl << std::endl;
}

int test() {
    std::string str = "hello template";
    std::string test;
    MessageParser *parser = MessageParser::getInstance();
    MessageQueueBase *mqueue =  MessageQueueBase::getInstance();
    // mqueue->write(str);
    // mqueue->read(str);
    for (auto i = 0; i < 5; i++) {
        str = "hello template " + toString(i);
        cout << "write: " << str << endl;
        parser->putMsgTest(str);
        mqueue->write(str);
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }
    //delete parser;
    //parser = NULL;
	return 0;
}

int main() {
    test();
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    return 0;
}

