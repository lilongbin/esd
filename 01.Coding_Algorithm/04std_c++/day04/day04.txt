this指针
const对象和const函数
析构函数,拷贝构造函数
new/delete
static成员

一/this指针
	指向当前对象地址的指针称为this指针;创建对象后会自动将当前对象的地址赋值给this指针;
	如果在构造函数中,this指向(正在构建的)对象的首地址;
	在成员函数中,this代表(调用这个函数的)对象的首地址;
	一个对象的大小是由成员变量决定的;成员函数放在代码区;
二/this指针的使用
	1.当函数的参数和成员变量重名时,可以使用this区分;
	2.可以用来返回当前对象的数据;可以返回指针/值/引用;
	3.this指针作为函数参数相关的数据;
		可以传递指针/值/引用;
	定义在类内的函数,在类内调用不用考虑函数的顺序;
	定义在类外的函数,在类内调用时要考虑声明的顺序;
	class A;//声明类型A
	class A{};//定义类型A
三/const对象和const函数
	const Animal a;//const对象
	成员函数
	void show() const {}//const函数
	const对象只能调用const函数;
	非const对象优先调用非const函数,也可以调用const函数;
	const函数和非const函数可以构成重载关系
	mutable的成员可以被const函数写
	void callfun(const A& a){
		a.fun//只能调用const函数
	}

四/析构函数
	和类型名同名,函数名前有个波浪号~
	任何类型都只有一个无参的析构函数;
	析构函数没有返回值类型;
	在对象销毁前会自动调用析构函数,也可以人为的调用析构函数;
	析构函数负责销毁和释放资源;

	何时需要自定义析构函数?
	有堆内存分配时;
五/拷贝构造函数
	复制另外一个对象:根据原来的一个对象,复制出另外一个对象;
	浅拷贝:只拷贝值,不开辟独立的内存空间;
	深拷贝:各个对象都开辟有自己独立的内存;
	产生拷贝的时机:
		1.用同类型的对象去初始化一个对象时;
		2.对象类型作为函数参数时;//非引用对象类型;
		3.函数返回对象类型;//使用匿名临时对象,简化编程;
六/new/delete和malloc/free的区别
	new比malloc多做了如下工作:
		如果类型的成员变量是类类型,new会自动构建成员;
		new自动调用构造函数;
		new自动处理类型转换;
	delete比free多调用了析构函数;
七/static成员
	static和普通成员的区别:
		普通类型的成员必须通过对象去调用;//
		static成员不使用对象就可以直接访问;访问前在数据前加上  类名::
	static函数中没有this指针,所以static函数不能直接访问到普通成员变量;
	static成员一般起共享和计数功能;属于类级别的;

	注意://静态成员变量必须在类外进行初始化;
	经测试放在初始化参数列表中也不行;
	静态函数中不能直接访问非静态成员(线程封装的雏形)

static 成员在类外初始化
const 成员在类的构造函数初始化列表中初始化
static const/const static 成员可以在类中初始化(实际上是声明)也可以不初始化,同时需要在类外定义;

静态函数使用例子
/*
 * static中构造this访问普通成员
 */
#include <iostream>
using namespace std;
class A{
	public:
	/*
	 * static void show() {
	 *     play();//不可以直接访问
	 * }
	 */
	/* 线程封装的雏形 */
	static void show(A *mythis){
		mythis->play();
	}
	void play(){
		cout << "this is play()" << endl;
	}
};
int main(){
	A a;
	//A::show();//错误：没有对象无法调用成员函数‘void A::play()’
	A::show(&a);
}

应用:实现单例模式?整个程序中只有一个这个类型的实例对象

要求:
	整个类型只有一个对象//静态成员变量?只有一份实例
	防止类外创建对象//私有构造函数和拷贝函数;
	静态函数提供外界访问接口//
有懒汉式和饿汉式
	饿汉式:立即创建对象;
	懒汉式:需要时才创建;适合不频繁使用的大对象


C++单实例类模板实现及使用

单实例类设计注意事项:
1. 构造函数私有化,拷贝构造函数及重载=操作符也私有化,暴露新的访问接口如 getInstance();
2. 推荐使用懒汉式即 getInstance()接口且使用双重锁定,既解决多线程竟态问题又保证性能,同时还要防止某一用户delete获取到的实例导致其他用户无法正常使用;
3. 良好的设计会考虑资源回收,可以构造内嵌类Garbo及其静态对象,系统自动析构全局变量及静态成员变量时可以实现自动删除单实例对象,使用时不需再关注对象的释放;
4. 静态成员变量要类外初始化,其中 Singleton<T>::Garbo 作为类型名要在前面加上 typename 显式通知编译系统; ms_pInstance 要初始化为NULL;
5. 将单例类模板声明为这个类的友元; friend class Singleton<XXT>; singleton模板类为XXT类的友元,模板类才能new XXT()实例对象;
6. 通过单例类模板中 XXT* s = Singleton<XXT>::getInstance(); 或公开继承 Singleton<XXT> 后 XXT* s = XXT::getInstance();创建/获取唯一实例对象;

参考代码

#ifndef __SINGLETON_H__
#define __SINGLETON_H__

#include <iostream>
#include <sstream>
#include <thread>
#include <mutex>
#include <queue>
#include <atomic>
#include <functional>
#include <chrono>
#include <memory>
#include <condition_variable>
#include <algorithm>

template <class T>
class Singleton
{
private:
    static std::mutex ms_MuxLock_Singleton;
    using MuxGuard = std::lock_guard<std::mutex>;
    static T* ms_pInstance;
    Singleton(const Singleton& src){(void)src;}
    Singleton &operator=(const Singleton& src){(void)src;};

    class Garbo
    {
    public:
        ~Garbo()
        {
            // std::cout<<"Singleton<"<<typeid(T).name()<<">::Garbo::~Garbo()" << std::endl;
            if (Singleton::ms_pInstance)
            {
                delete Singleton::ms_pInstance;
                Singleton::ms_pInstance = NULL;
            }
        }
        void touch() { return; }
    };
    static Garbo ms_garbo;

protected:
    Singleton() {
        ms_garbo.touch(); //prevent optimised and no garbo instance to trigger deconstruct
    }
    ~Singleton() {}

public:
    static T* getInstance()
    {
        if (ms_pInstance == NULL)
        {
            MuxGuard mlk(ms_MuxLock_Singleton);
            if (ms_pInstance == NULL)
            {
                ms_pInstance = new T();
            }
        }
        return ms_pInstance;
    }
};

template <class T> typename Singleton<T>::Garbo Singleton<T>::ms_garbo;
template <class T> std::mutex Singleton<T>::ms_MuxLock_Singleton;
template <class T> T* Singleton<T>::ms_pInstance = NULL;

#endif


/* class MsgSequenceID */
class MsgSequenceID:public Singleton<MsgSequenceID>
{
   friend class Singleton<MsgSequenceID>;
public:
    ~MsgSequenceID();
    uint32_t getSequenceID() {
        uint32_t tmp;
        {
            MuxGuard g(mLock);
            tmp = m_sequenceID++;
        }
        return tmp;
    }
    bool initSequenceID() { m_sequenceID = 0; return true;}

private:
    MsgSequenceID();

    using MuxGuard = std::lock_guard<std::mutex>;
    mutable std::mutex mLock;
    uint32_t m_sequenceID;
};

