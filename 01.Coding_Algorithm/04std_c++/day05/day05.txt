成员指针
运算符重载
指针和引用的联系和区别;
成员函数/静态成员函数/友元函数


一/成员指针
	struct Date{
		int year;
		int month;
		int day;
	};
	1.1指向成员变量的指针
		//定义成员指针
		int Date::*pmem;//成员指针,可以指向year/month/day;
		pmem = &Date::year;//成员指针赋值
		Date date;
		date.*pmem;//通过成员指针得到值
		Date *date2 = new Date();
		date2->*pmem;
	本质:
		成员变量指针的本质就是对象的地址偏移量;
	1.2成员函数指针
	struct Date{
		int year;
		int month;
		int day;
		void showyear(){
			cout << year << endl; 
		}
		
	};
	//定义成员函数指针
	void (Date::*pfun)();
	//赋值
	//pfun = showyear();//错误,是函数的返回值赋值
	//pfun = showyear;//格式正确
	pfun = &Date::showyear;//如果没有&,编译器会认为是静态的函数
		Date date;
	//通过对象调用指针对应的函数
		(date.*pfun)();
		Date *date2 = new Date();
		(date2->*pfun)();
二/运算符重载
	2.1本质
		就是函数的特殊表现形式
	2.2分数
		分数的特征:分子/分母
		分数的功能:显示一个分数,分数的相加;
		//设计一个全局函数,两个分数相加;
	L#R  //当编译器看到这个标志的时候,去L对象对应的类型中找一个成员函数operator#(R对象类型的参数par);如果没有就去全局区找一个全局函数operator#(L对象对应的类型par1,R对象对应的类型par2);如果还没有找到,编译器就报错;		
	2.3设计一个类,包装一个整数
	Integer
	成员变量	
	int data;
	函数:
		构造函数//不属于成员函数,负责赋值
		提供两个整数相加/乘法的运算符号支持
		判断两个整数是否相等(值相等);
		显示这个整数的值;
	2.4输入输出运算符的重载
		ostream/*类型的*/ cout;
		istream/*类型的*/ cin;
		cout/cin都是对象;
		Integer c;
		cout << c << endl;//报错
		流对象不允许复制;所以要用引用,且不允许加const修饰;
	L#R 去L对象对应的类型中找一个成员函数cout.operator<<(Integer par2);如果没有就去全局区找一个全局函数ostream& operator<<(ostream&/*必须是引用类型且不能加const*/ cout,const Interger& par2);
	返回值设计成ostream&是为了连续输出
	operator<<如果要访问类的私有成员,可以声明friend ostream& os,流不能复制,所以使用引用,流不能加const;
	const Integer& par2 //const适应输出临时对象和const对象,引用减少拷贝;
	
	
补充:
指针和引用的联系和区别;
联系:引用是指针实现的,所以很多情况下指针可以用引用代替;
	如:函数的参数 函数的返回值;
区别:
	1.引用必须初始化,指针不必初始化//最好初始化以防止悬空指针;
	2.引用一旦初始化,就不能改变绑定的对象,但是可以改变对象的值;
		指针可以改变指向;
	3.指针是一个实体变量,大小确定;引用是一个别名,大小和引用对象相关;
	4.有指针的指针,没有引用的引用;即有int **; 没有int&&;
	5.有指针的引用,没有引用的指针;即有int*&,没有int&*;//二级指针用来改变指针的指向;
	6.有指针的数组,没有引用的数组;int *data[10];可以,没有int& data[10];
		int *data[10] = {&a,&b,&c};
		int  data[10] = {a,b,c};//a b c的值
	7.有数组的引用
		int data[3]; int(&rdata)[3];

三/成员函数/ 静态成员函数/ 友元函数
	3.1可以访问类的私有成员;
	3.2在类内受访问权限控制;
	3.3含this指针,必须通过对象去调用;
		成员函数必须满足上三条限制;
		静态函数满足前两条;
		友元函数只满足第一条;

