数据库的连接
sqlca与错误处理
数据操作
动态SQL

1 数据库的连接
	本地连接:
		exec sql connect:usernamepassword
		exec sql connect:username identified by userpassword;
		以上连接数据库的操作为本地连接
		echo $ORACLE_SID //得到数据库服务名
	远程连接:
		$ORACLE_HOME/network/admin/tnsnames.ora //远程连接的数据库文件描述
# tnsnames.ora Network Configuration File: /export/home/oracle/product/10.0/network/admin/tnsnames.ora
# Generated by Oracle configuration tools.
CAH_172.17.3.6 =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = 172.17.3.6)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = ora10g.172.17.3.6)
    )
  )
  从该文件可以获得远程连接的数据库的文件描述
练习:
		1remotedbconn.pc 
		2multidbconn.pc
第2种远程数据库连接方式
	建立database link
	格式:
	create database link 链接名
		connect to 用户名 identified by 密码 using '远程数据库描述';
		
	create database link mydbto36link 
			connect to csd1312 identified by  csd1312 using '(DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST = 172.17.3.6)(PORT = 1521))
    )
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = ora10g.172.17.3.6)
    )
  )';
  select id,first_name,salary from s_emp@mydbto36link where id =1;
  
两种远程数据库连接:
  	第1种:
	  	$ORACLE_HOME/network/admin/tnsnames.ora
	  	host		service_name
	  	exec sql connect:userpasswd at:标签名 using '远程数据库描述';
	  	exec sql connect:userpasswd at:标签名;
	  	exec sql at:标签名 select ...;
	  	exec sql at:标签名 update ...;
	第2种:使用database link
	  	在数据库中建立链接database link
		  	create database link 链接名 connect to 用户名 identified by 密码 using '远程数据库描述';
  		在proc代码中使用连接,必须先登录本地数据库;
  		使用时在操作的表名后加上@链接名;
  		exec sql connect:userpasswd;
  		exec sql select salary into :salary from s_emp where id = 25;// 访问本地
   		exec sql select salary into :salary from s_emp@mydbto36link where id = 25;// 访问本地
   		exec sql update s_emp@mydbto36link set salary=salary+2000  where id = 25;// 访问本地
   		exec sql commit;
  
2 sqlca与错误处理
	/* 局部错误处理 */
		exec sql update account set money = money -20000 where id = '001';
		if(sqlca.sqlcode == 0){
			a=1;
		}else{
			a=0;
		}
	  	exec sql update account set money = money +20000 where id = '002';
		if(sqlca.sqlcode == 0){
			a=b;
		}else{
			b=0;
		}
		if(a&&b){
			commit;
		}else{
			rollback;
		}
 	/* 全局错误处理 */ 
  		exec sql whenever 条件 动作;
  		条件:sqlerror notfound sqlwarning
  		动作:do 函数
  				do break;
  				continue;
  				goto 标签;
  		当程序出现问题时,程序就会向上找一个合适的处理(由下向上最近的);如果没有找到相应的处理则采用默认的处理方式;
  		所以如果进行了sql语句判断则会先进行全局处理,后进行局部处理;
3 数据的操作
3.1一个变量一次只能操作单行单列
	exec sql select first_name into :var_name from s_emp where id =1;
3.2多个变量一次操作单行多列
	exec sql select id,first_name,salary into :id,:var_name,:salary from s_emp where id =1;
3.3使用结构体操作单行单列/单行多列
	struct {
		int id;
		char name[30];
		double salary;
	}emp;//emp是一个匿名的结构体变量
			struct {
		int id;
		char name[30];
		double salary;
	};//emp是类型的一部分
	typedef struct emp{
		int id;
		char name[30];
		double salary;
	}emp;//emp是一个结构体类型
	struct emp var_emp;//在proc/c++中定义变量时必须要带struct
3.4结构体数组可以操作多行多列
	定义一个结构体数组,把s_emp表中所有的id,first_name,salary放入数组;再把数组中的所有数据放入一个提前建立好的表中;
	create table myemp100(id number primary key,first_name varchar2(30),salary number);

3.5使用游标操作多行多列
	3.5.1游标的使用步骤
		定义游标
			exec sql declare 游标名 cursor for select 语句;// 非滚动游标只能顺序访问数据;
		打开游标
			exec sql open 游标名;
		提取数据
			exec sql fetch 游标名 into :宿主变量;
		关闭游标
			exec sql close 游标名;
	3.5.2例子8cursor.pc
		把s_emp表中的id,first_name,salary放入一个游标中,然后输出这个游标的前两条数据;
3.6滚动游标即吸管技术
	scroll		可以不按照顺序提取数据;
	fetch last
	fetch first
	fetch prior // 当前行的前一个
	fetch next // 当前行的后一个
	fetch current // 当前行
	fetch relative n // n是正数时向后移动,n是负数时向前移动;
	fetch absolute n // 绝对的第几条;
4 动态SQL 
	在程序运行的过程中,SQL语句可以根据运行的条件发生改变;核心理念是把SQL语句变成字符串;
4.1第一种
	要求只能是非select语句;
	不能有占位符
	执行次数不多 
	exec sql execute immediate :sqlstr;
4.2第二种
	只能是非select语句;
	可以有占位符;
	"insert into testdsql100 values(100,'test100')"
	"insert into testdsql100 values(101,'test101')"
	"insert into testdsql100 values(:b0,:b1)"
	加入占位符,便于批量数据的处理
	exec sql prepare s from :sqlstr;
	exec sql execute s using :id,:name;
4.3第三种/* 超级重点的例子 */
	能且只能select语句;
	可以有占位符;
	把"select id,first_name,salary form s_emp where id>:b0"打印到屏幕;
	动态sql2和游标的结合
	游标比结构体数组更动态一些,不用根据数据大小申请固定大小的空间;
	
  
