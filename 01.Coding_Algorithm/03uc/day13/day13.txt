应用消息队列/信号/进程/文件操作
模拟银行ATM的综合案例



回顾
    IPC//进程间通信;
    Unix系统很多东西都是建立在进程的基础之上的,多个进程间需要交互数据,进程之间数据的交互叫做IPC;Unix系统大量使用IPC技术;
IPC主要的方法
    1-> 文件;
    2-> 信号;
    3-> 管道;
    4-> 共享内存;
    5-> 消息队列;//重点
    6-> 信号量集;
    7-> 网络socket
    ...
共享内存和消息队列的使用步骤
    共享内存的编程步骤
    1-> 使用ftok()或头文件,获取key;
    2-> 使用shmget(key,...)创建/获取共享内存;
    3-> 使用shmat(shimd,...)映射共享内存;
    4-> 正常使用;
    5-> 使用shmdt(void *)解除对共享内存的映射;
    6-> 如果不再使用,需要用shmctl(shimd,IPC_RMID,0)从内核中删除共享内存(彻底删除);
    注//只有挂接数为0的共享内存才能被删除,否则只会做一个删除的标记,等到挂接数为0时再真正删除;

消息队列的变成步骤
    1.使用ftok()或定义头文件生成key;
    2.使用msgget(key,...)创建/获取消息队列;
    3.往队列中存入/取出消息;
        msgsnd()//放入消息;
        msgrcv()//取出消息;
        在取出消息时,可以按照消息的类型有选择的取出消息;
    4.如果确定不再使用消息队列,使用msgctl()删除消息队列;
从听懂到熟练应用还有两个步骤:在遇到问题的时候能不能想到要用到那个知识点,在使用的时候该怎么用;

    资源管理一般遵循谁创建谁回收的基本原则;

综合案例1模拟银行ATM
    银行ATM提供的功能:
    开户1/销户2/存钱3/取钱4/查询余额5/转账6/成功7/失败8;
开户流程
    账户定义一个结构,包括以下信息
    ID,用户名,密码,钱数
    卡号由系统负责提供,用户名,密码,钱数由用户输入;
    1.用户登录客户端,选择一个功能,选择开户,输入用户名/密码/钱数,把数据封在一个消息中,放入消息队列中(发给服务器端)
    2.服务器端从消息队列中取出消息,生成一个ID,然后把用户的账户写入文件中,并返回是否成功给客户端;
    3.客户端收到服务器端的返回,给出操作结果;

思路
    1.先定义一个结构,用来代表账户信息;
    2.再定义一个消息结构Msg,第2个参数用账户结构;
    3.定义一系列的宏,代表消息类型,每种消息类型对应一种操作/操作结果;
    以上3个定义在头文件;
    4.至少写2个程序,一个客户端(有界面),另外一个是服务器端;
    5.创建2个消息队列,一个用于客户端发给服务器端,另一个用于服务器端发给客户端;
    6.服务器端应该先启动,启动后在死循环中接收客户端发来的消息;收到消息后用类型决定如何处理,并把结果封装在消息中,把结果消息放入另外一个消息队列中;
    7.客户端启动显示界面,选择功能后输入必要信息,把数据封在消息中放入消息队列,并等待服务器端的返回消息;

两个问题
    1.保存用户信息时,可以一个账户一个文件;
    2.如何生成无重复的系统账户ID?
        实现一个计数累加的功能;先创建一个文件,写一个初始值进去,每次开户请求从文件中取出数字,自增1以后做新的ID,并切将新的ID再写回到文件中;文件加写锁;
    3.服务器提供退出功能;退出时先删除消息队列;

获取密码可以使用getpass()函数;

系统架构师,商业建模;
