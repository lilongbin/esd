嵌入式开发环境搭建
Linux内核编译
内核模块


游成伟
15801588497
youcw@tarena.com.cn
409025260@qq.com

+--------------------+
| 嵌入式开发环境搭建 |
+--------------------+

硬件:CW210开发板
软件:官方提供的uboot, kernel, rootfs(busybox)源码;(芯片厂商会提供参考板和参考代码)
目标:让系统在开发板跑起来
步骤:

在产品研发阶段最好有一块网卡,用tftp方便文件传输;

uboot:
1.解压uboot源码
	tar -jxvf uboot-xxx.tar.bz2
	tar -zxvf uboot-xxx.tar.gz
	tar -Jxvf uboot-xxx.tar.xz
2.进入uboot源码根目录,进行配置
	make distclean //清除源码之前的配置信息
	make xxxx_config //针对具体的开发板进行配置,来自Makefile
3.修改Makefile 
	ARCH=arm
	CROSS_COMPILE=arm-linux-
4.make all //编译,生成u-boot.bin,烧写验证即可
5.目标:一定要有串口信息,开发板一定要有网络功能或者USB(便于调试);
6.提高:最好还是掌握uboot的启动流程
	思考:如何添加uboot启动logo

kernel:
1.解压内核源码
	tar -jxvf linux-xxx.tar.bz2
	tar -zxvf linux-xxx.tar.gz
	tar -Jxvf linux-xxx.tat.xz
2.进入内核源码,进行配置
  make xxxx_defconfig
  或者
  cp arch/arm/configs/xxxx_defconfig .config
 
 修改Makefile
 ARCH=arm
 COSS_COMPILE=arm-linux-

3. 一定做三个检查
   执行make menuconfig
   到System type->
	 	1.检查是否支持当前CPU架构(ARM:RISC)
		2.检查是否支持当前处理器(S5PV210)
		3.检查是否支持当前开发板(CW210, smdkv210...)
4.make zImage /make uImage
5.用新内核来引导系统
6.如果出现问题:
		学会分析问题,逐步探索问题的根源
		官方提供的内核基本上没有什么问题
		如果仍然有问题,比较分析官方成功的板子和自己的板子之间的差异,一般考虑时钟频率问题和串口初始化的问题,平台代码中也会涉及到串口的初始化
		答案:在平台代码的.c文件(arch/arm/mach-s5pv210/mach-cw210.c)(切记一定要多看!)

rootfs(体力活):
1.通过配置编译busybox
2.创建必要的目录
  mkdir etc lib dev proc sys (5大必须目录)
3.部署库(拷贝库,库文件在交叉编译器中)
	2种方法:
  1.拷贝所有的库,缺点是浪费闪存空间
  2.通过命令查找需要的库
		如通过以下命令查找需要的库:
    arm-linux-readelf -a 应用程序 | grep "Shared"
    另外别忘记拷贝动态链接库(ld-*)
4.在etc中添加必要的系统启动的配置文件
5.首先通过nfs或者ramdisk进行验证

交叉编译器:最好使用官方提供的编译器!
有时supplier会用软件绕过硬件bug,如在编译器中做修改
如果官方有提供编译器一定要使用官方的,当硬件有问题时官方会通过>
自己的编译器解决问题

面试题:
1.请描述uboot的作用或者你对它的认识;
   1.uboot的硬件初始化
   2.uboot的终极作用,即引导内核并且给内核传递参数
2.阐述嵌入式linux系统的启动流程;
	 嵌入式学习要先识记,再理解应用

uboot的启动参数:
bootcmd:主要用来 加载并启动 内核
      setenv bootcmd tftp 50008000 zImage \; bootm 50008000
      或者
      setenv bootcmd nand read 50008000 200000 500000 \; bootm 50008000

bootargs:内核就是一个大程序而已,执行到最后需要挂接一个根文件系统,将操作权限交给用户,挂接文件系统的类型需要用bootargs来指定
      setenv bootargs root=/dev/nfs init=/bin/sh nfsroot=192.168.1.8:/home/tarena/workdir/tools/busybox-1.19.4/_install ip=192.168.1.6:192.168.1.8:192.168.1.1:255.255.255.0::eth0:on console=ttySAC0
      或者
      setenv bootargs root=/dev/mtdblock2 init=/linuxrc console=ttySAC0  rootfstype=cramfs
      或者
      setenv bootargs root=/dev/ram rw initrd=50800000,8M console=ttySAC0

+-------------------+
| Linux操作系统结构 |
+-------------------+
知识讲解
不同的用户眼中的操作系统作用
	应用程序------用户视图
	语言处理------应用程序员视图
	操作系统------操作系统设计者视图
	硬件----------供内核驱动操作
操作系统如同网络编程中的服务器端,用户主动它被动,用户发起请求它处理请求
linux操作系统的结构
分用户空间和内核空间
用户应用程序和C库函数在用户空间,用户应用程序/C库函数和系统调用接口三者相互之间都可以交互
用户应用软件或C库函数通过系统调用接口与内核打交道
系统调用接口是用户空间和内核空间的必经之路
系统调用接口和内核属于内核空间,在内核空间处理用户的请求
内核与硬件交互

printf属于用户空间,在标准c库中,用户应用c库函数时,c库函数会>
再调用系统函数;
用户也可以直接调用系统函数,如write属于系统调用

为什么linux要分为用户空间和内核空间
涉及到ARM&linux的7种硬件工作模式中的user模式和SVC模式,硬件已经定义好
	用户不能访问内核的地址空间,包括代码和数据
	用户不能直接操作硬件资源,操作系统起到承上(用户空间)启下(硬件资源)的作用
	必须通过系统调用来实现访问
	通过硬件中断实现两者转移
	用户和内核都有自己独立的栈,用户空间的栈非常大0-3G,进程由用户空间通过系统调用进入内核空间时,内核会为进程分配一个内核栈8K
	最终起到安全保护的作用
每个进程的用户空间都有一个独立的第0-3G的空间,内核共享一个3-4G空间

Linux内核的构成--7大子系统
	系统调用接口	SCI		system call interface
	进程管理		PM		process management
	虚拟文件系统	VFS		virtual file system
	内存管理		MM		memory management
	网络协议栈				network protocol stack
	平台相关		ARCH	architecture
	设备驱动		DD		device driver

各模块的功能

系统调用接口
	//为用户提供一套标准的系统调用函数来访问Linux内核,搭起了用户空间和内核空间的桥梁
进程管理
	//用于进程的创建,停止,通信和调度
内存管理
	//主要用于多个进程安全地共享内存区域
网络协议栈
	//实现网络数据的传输
设备驱动
	//用于控制操作硬件
虚拟文件系统VFS
	//1.隐藏各文件系统的具体细节
	//2.提供统一的文件操作接口;
	//应用程序open("a.txt", O_RDWR) <=> VFS <=> ext2/fat/NFS/others

知识点回顾
	linux内核源码
	linux内核配置和编译

内核配置编译案例:
硬件背景:开发板上有个LM77温度传感器芯片
软件要求:实现LM77的驱动程序
解决方案:
1.首先看内核是否支持或者已有了这款芯片的驱动
	进入内核源码执行
	make menuconfig
2.搜索LM77关键字,得到以下信息:
    Symbol: SENSORS_LM77 [=m]               
  │ Prompt: National Semiconductor LM77     
  │   Defined at drivers/hwmon/Kconfig:509  
  │   Depends on: HWMON [=y] && I2C [=y]    
  │   Location:                             
  │     -> Device Drivers                   
  │       -> Hardware Monitoring support (HWMON [=y]) 
3.既然有LM77的配置选项信息,表明内核肯定有对应的驱动程序,
  请问驱动的源码在哪里?
  │   Defined at drivers/hwmon/Kconfig:509   
4.答案:
   1.首先打开drivers/hwmon/Kconfig 第509行,找到对应的LM77配置信息处
   config SENSORS_LM77 就可以得到对应给Makefile使用的配置项:
   CONFIG_SENSORS_LM77
   2.然后打开Makefile,找到CONFIG_SENSORS_LM77,就可以找到如下信息:
   obj-$(CONFIG_SENSORS_LM77) += lm77.o
   3.就可以得知对应的源码文件为lm77.c

问:如果找到了lm77.c源码,如何找对应的内核配置信息?
	find . -name lm77.c
	然后找Makefile和Kconfig对应的项

*	把源码和内核源码编译在一起
M	把源码编译成模块,和内核分开编译
	不选表示不编译
-------------------------------------------------------------
案例:要求开发板采用官方内核
内核版本:Kernel_2.6.35.7_CW210_for_Linux_v1.0.tar.gz
开发板目前情况:u-boot-1.3.4,rootfs已经跑起来!
实验步骤:
1.修改/opt目录的用户和组的信息,将其修改为tarena用户
   sudo chown tarena /opt -R
   sudo chgrp tarena /opt -R
   或
   sudo chown tarena:tarena /opt -R
   -R表示递归到所有子目录
   以上命令要求tarena用户和组已存在
2.解压官方内核,解压到/opt/
   tar -zxvf Kernel_2.6.35.7_CW210_for_Linux_v1.0.tar.gz -C /opt
   -C表示解压到/opt目录
3.进入opt目录,修改内核源码目录的名称
   cd /opt
   mv cw210_kernel_2.6.35.7 kernel //重命名为kernel目录
4.进入内核源码根目录/opt/kernel,进行配置
   cp config_CW210_linux_V1.0 .config
5.执行make menuconfig做三个检查
   System Type -->
	 ARM system type (Samsung S5PV210/S5PC110)  --->    
	 Board selection (SMDKV210)  --->     
6.make zImage
7.cp arch/arm/boot/zImage /tftpboot 将编译结果拷贝到开发板运行
  注意:uboot的bootcmd必须设置为网络启动方式
	setenv bootcmd tftp 50008000 zImage \; bootm 50008000
	也可以放20008000,内存基地址是20000000,基地址到8000放的是页表,就是物理和虚拟内存的映射关系,不能用来放其他东西
  注意:采用网络文件系统的启动方式(NFS)
	setenv bootargs root=/dev/nfs nfsroot=192.168.1.8:/opt/rootfs ip=192.168.1.6:192.168.1.8:192.168.1.1:255.255.255.0::eth0:on init=/linuxrc console=ttySAC0,115200
	192.168.1.6和192.168.1.8分别是给内核启动以后开发板使用的IP和ubuntu虚拟机的IP
	主机的IP应避免和虚拟机的及开发板的IP冲突
问:init=/linuxrc能不能不写或写错init=tarena
	//可以,没有指定1号进程就会执行/sbin/init,真正的1号进程
问:console=ttySAC0能不能不写或者写错console=ttySAC,看看出错的信息!
	//不可以,终端会没有信息,用于指定打印终端(串口)
把问题记住才会长本事

8.网络文件rootfs拷贝到/opt/目录
	cp /home/tarena/workdir/rootfs/rootfs /opt -frd
	-d	same as,当拷贝软件接时可以保持其属性,否则会变为事体
	-f	如果目标已存在就会覆盖
	-r	recursive递归,拷贝目录
9.修改exports添加NFS共享目录
	sudo vim /etc/exports在文件最后添加信息如下:
	/opt/rootfs *(rw,sync,no_root_squash)
10.重启nfs网络服务
    sudo /etc/init.d/nfs-kernel-server restart
    sudo /etc/init.d/tftpd-hpa restart

T T T T T 表示timeout超时,可能需要检查开发板的IP设置:
#print
#setenv serverip 192.168.1.8	设置主机的IP
#setenv ipaddr 192.168.1.110	设置板子的IP给uboot使用的IP
#save
#ping 192.168.1.8

如果使用SecureCRT_CN远程登录虚拟机中的Ubuntu系统,操作会快速一些,因为本软件是字符终端,而直接登录是图形终端.
成功登录的前提是开发板的NFS网络已经建立好了

通过以上步骤已经搭建好了嵌入式开发的基本环境

+--------------+
| 添加内核组件 |
+--------------+
编译组件到内核中zImage的问题:
	1.会造成内核过大
	2.添加/删除/更新组件时需要重新编译内核
	3.需要重启系统才能运行新的zImage,但是有些场合重启代价很大
改进方法:
	内核模块机制可以实现向正在运行中的内核动态地加载和卸载
	可以不用重新编译内核

内核模块特点:
	本身不被编译进内核文件zImage,原始的zImage可以很小
	可以根据需要在内核运行期间动态加载和卸载
	不必重新编译内核和重启系统重新加载内核
	模块名以.ko结尾, kernel object

模块范例
1.创建并进入目录01insert_module
编写hellokernel.c
------------------------------
#include <linux/init.h>	//这里的头文件都是内核源码的头文件
#include <linux/module.h> //不是C标准库的头文件

static int __init hellokernel_init(void)
{
	//入口/出口函数返回值init,参数void
	printk(KERN_INFO "%s: hello kernel\n", __FUNCTION__);
    return 0; //内核编程中成功返回非负,失败返回负值
}
static void __exit hellokernel_exit(void)
{
    printk(KERN_INFO "%s: goodbye kernel\n", __FUNCTION__);
}

module_init(hellokernel_init);//指定内核入口函数
module_exit(hellokernel_exit);//指定出口函数
------------------------------
模块加载函数
	加载模块函数是,被系统自动调用的函数,通过module_init宏来指定,一个模块只有一个加载函数
模块卸载函数
	卸载模块时,被系统自动调用的函数,通过module_exit宏来指定,一个模块只能有一个卸载函数

模块编译
编译模块需要使用内核源码
路径:/home/esd/test 源码:hellokernel.c, Makefile
内核源码路径:/opt/kernel 内核主Makefile

编写Makefile
------------------------------
ifneq ($(KERNELRELEASE),)
obj-m += hellokernel.o
else
KERNELDIR =/opt/kernel
all:
	PWD=$(shell pwd)
	$(MAKE) -C $(KERNELDIR) M=$(PWD)
clean:
	rm -rf .*.cmd *.o *.mod.c *.ko .tmp_versions module* Module*
endif
------------------------------
注意
ifneq后有空格
空格-C空格$()空格M=

2.执行make命令,编译生成hellokernel.ko模块
将模块复制到根文件系统的根目录下
注:
	Makefile执行的过程
	1.第一次make的时候KERNELRELEASE为空,走else分支
	2.else分支中首先获得内核源码路径,然后执行伪目标all
	3.PWD=/home/esd/test,然后再次调用make命令,-C进入到内核源码目录,到内核源代码执行主Makefile,M指定当前模块所在路径,告诉内核主Makefile还有一个子目录,主Makefile会把/home/esd/test作为子目录,内核源代码的主Makefile会被执行,内核主Makefile会遍历子目录的Makefile,所以会再次调用这个子Makefile;在内核源码内执行主Makefile时会对KERNELRELEASE赋值
	4.当再次调用子Makefile时,发现KERNELRELEASE已经不为空,然后会模块化编译hellokernel.c编译成hellokernel.ko
	我们所编写的这个Makefile会被执行两次,第一次是我们自己键入的make,然后是内核的主Makefile调用的.
3.启动TPAD并加载内核,进入文件系统根目录
查看已安装模块
	#lsmod
加载模块insert module hellokernel.ko
	#insmod hellokernel.ko
会提示traints kernel
	#lsmod
查看模块hellokernel.ko信息
	#modinfo hellokernel.ko
卸载模块
	#rmmod hellokernel.ko

多文件Makefile范例
改为obj-m +=test.o
test-objs =helloworld.o file1.o file2.o
编译的时候会将3个文件编译成一个test.ko文件,test不能和后面三个文件中的任何一个文件名相同
file1.c和file2.c不能有module_init和module_exit

或者
obj-m += hellokernel.o file1.o file2.o
一个.c文件对应一个.ko,灵活度较大
file1.c和file2.c都可以有module_init和module_exit

加载模块问题:
/ # modinfo hellokernel.ko 
modinfo: can't open '/lib/modules/2.6.35.7-Concenwit/modules.dep': No such file or directory

解决方法:
1.进入内核源码目录/opt/kernel
	1.1.执行模块编译命令
		make modules
	1.2.执行模块安装命令
		make modules_install INSTALL_MOD_PATH=/opt/
	结果会在/opt/目录下面新生成一个新目录lib/
2.将生成的lib下所有的东西拷贝到开发板使用的rootfs/lib/下即可
	mv /opt/lib/?* /opt/rootfs/lib/ 
3.再用modinfo查看模块信息

modprobe命令也可以实现模块的加载和卸载
insmod只会加载,不管依赖关系
可以自动解决依赖关系dependent relation,需要模块/lib/modules/$(version)/modules.dep

modules.dep生成步骤
PC平台
	make modules_install
	安装到/lib/目录下
ARM平台
	make modules_install INSTALL_MOD_PATH=/opt/
	1.在/opt目录下生成lib目录
	2.将lib目录下所有内容拷贝到开发板根文件系统的lib目录中

内核模块VS.应用程序
应用程序起始于main函数,终止于main函数中的return 0;
内核模块起始于加载函数,加载函数注册自己提供的服务,加载函数执行完毕,模块依然存在
内核调用调用卸载函数,模块消失,占用的内存也会被回收

内核模块开发的特点--7大注意事项
	1.不能访问C库也不能访问标准C的头文件
	2.必须使用GNU C
	3.没有内存保护机制
	4.难以执行浮点运算
	5.内核给每一个进程只有一个很小的定长内核栈8K
	6.内核支持中断,抢占和SMP(shared memory processor),要时刻注意同步和并发问题
	7.要考虑可移植性的重要性

手机8核只是一个噱头,如果同开手机资源无法承受,一般其他核都是在睡眠;
尽量还是买64位的手机,代表内存支持更大


添加模块信息
MODULE_LICENSE("GPL");
	//添加许可声明,必须加,否则内核中的一些API不能调用
MODULE_AUTHOR("myname <name@mail.com>");
	//添加作者信息,可选
MODULE_DESCRIPTION("Hello Kernel Module");
	//添加模块功能描述信息,可选
MODULE_VERSION("V1.0.0");
	//添加模块版本信息,可选

